"use strict";(self.webpackChunkcodec_wiki=self.webpackChunkcodec_wiki||[]).push([[7957],{7002:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"encoders/AVM","title":"AVM","description":"AVM (AOM Video Model) is the reference software for next codec from Alliance for Open Media.","source":"@site/docs/encoders/AVM.mdx","sourceDirName":"encoders","slug":"/encoders/AVM","permalink":"/docs/encoders/AVM","draft":false,"unlisted":false,"editUrl":"https://github.com/av1-community-contributors/codec-wiki/tree/main/docs/encoders/AVM.mdx","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"label":"AVM","sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"VTM","permalink":"/docs/encoders/VTM"},"next":{"title":"HM","permalink":"/docs/encoders/HM"}}');var s=i(4848),r=i(8453);const t={label:"AVM",sidebar_position:15},c="AVM",d={},l=[{value:"Rumors",id:"rumors",level:2},{value:"Installation",id:"installation",level:2},{value:"Arch Linux",id:"arch-linux",level:3},{value:"Compiling",id:"compiling",level:3},{value:"Usage",id:"usage",level:2},{value:"aomdec",id:"aomdec",level:2}];function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"avm",children:"AVM"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"AVM (AOM Video Model) is the reference software for next codec from Alliance for Open Media."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://gitlab.com/AOMediaCodec/avm",children:"AVM"}),", or ",(0,s.jsx)(n.strong,{children:"A"}),"OM ",(0,s.jsx)(n.strong,{children:"V"}),"ideo ",(0,s.jsx)(n.strong,{children:"M"}),"odel is the reference implementation for a future codec from the Alliance for Open Media, the organization behind ",(0,s.jsx)(n.a,{href:"/docs/video/AV1",children:"AV1"}),".\nThe codebase is under the Clear BSD license and currently only produces ",(0,s.jsx)(n.code,{children:"av01"})," bitstreams."]}),"\n",(0,s.jsx)(n.p,{children:"The AVM codec is currently in development and is not yet ready for production use. Not much has been documented or tested."}),"\n",(0,s.jsx)(n.h2,{id:"rumors",children:"Rumors"}),"\n",(0,s.jsx)(n.p,{children:"Some things about the new encoding implementation can be confirmed via the codebase, but none of those changes are final until the codec is standardized and officially released."}),"\n",(0,s.jsx)(n.p,{children:"Some rumors about the codec include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The name of the codec is going to be AV2, superseding AV1"}),"\n",(0,s.jsx)(n.li,{children:"The codec will be based on AV1, with certain backwards compatibility features available"}),"\n",(0,s.jsx)(n.li,{children:"Hardware decoding implementations could be implemented at no cost (no royalties) by utilizing GPU shaders and existing AV1 decoding hardware."}),"\n",(0,s.jsxs)(n.li,{children:['AOM\'s strategy will be to release codecs "mid-cycle" relative to ISO/ITU\'s release schedule, meaning it is likely that "AV2" will compete with ',(0,s.jsx)(n.a,{href:"/docs/video/VVC",children:"VVC"}),", not ",(0,s.jsx)(n.a,{href:"/docs/video/ECM",children:"ECM"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"A quantizer scale of 0-255 will be standard."}),"\n",(0,s.jsxs)(n.li,{children:["AVM tries to address some issues with high-fidelity AV1 encoding by introducing a better denoiser to mitigate ",(0,s.jsx)(n.a,{href:"/docs/introduction/video-artifacts#mosquito-noise",children:"mosquito noise"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.h3,{id:"arch-linux",children:"Arch Linux"}),"\n",(0,s.jsxs)(n.p,{children:["AVM is available in the Arch User Repository (AUR) as ",(0,s.jsx)(n.code,{children:"avm"})," and ",(0,s.jsx)(n.code,{children:"avm-git"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"compiling",children:"Compiling"}),"\n",(0,s.jsxs)(n.p,{children:["Since this encoder is under heavy development, there are no pre-built binaries provided, so you will need to compile yourself.\nWindows users are recommended to compile via MinGW-W64 which comes with ",(0,s.jsx)(n.a,{href:"https://msys2.org/",children:"MSYS2"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Compilation requires CMake, Nasm, and Perl."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://gitlab.com/AOMediaCodec/avm.git\ncd avm/build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=0\nmake -j$(nproc)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Since this is a huge project, compiling will take a while depending on your CPU."}),"\n",(0,s.jsxs)(n.p,{children:["The resulting binary will be called ",(0,s.jsx)(n.code,{children:"aomenc"}),", the same name that encodes content to AV1.\nIt will be available in the same folder (",(0,s.jsx)(n.code,{children:"build"}),"), or you can run ",(0,s.jsx)(n.code,{children:"make install"})," on Linux to install (May need elevated permissions)."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["To convert ",(0,s.jsx)(n.code,{children:"cq-level"})," in aomenc and ",(0,s.jsx)(n.code,{children:"crf"})," in SVT-AV1 to AVM's QP values, multiply by 4. For example, ",(0,s.jsx)(n.code,{children:"--cq-level 20"})," equals to ",(0,s.jsx)(n.code,{children:"--quantizer 60"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Simple Y4M input with QP 65, and ",(0,s.jsx)(n.code,{children:"ivf"})," output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aomenc --qp=65 -o output.ivf input.y4m\n"})}),"\n",(0,s.jsx)(n.p,{children:"Preset level 6 (higher is faster), QP 65, Y4M input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aomenc --qp=65 --cpu-used=6 -o output.ivf input.y4m\n"})}),"\n",(0,s.jsx)(n.p,{children:"FFmpeg piping:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ffmpeg -v error -i input.mkv -f yuv4mpegpipe -strict -1 - | aomenc --qp=65 --cpu-used=6 -o output.ivf -\n"})}),"\n",(0,s.jsx)(n.h2,{id:"aomdec",children:"aomdec"}),"\n",(0,s.jsxs)(n.p,{children:["You will need the ",(0,s.jsx)(n.code,{children:"aomdec"})," binary you also compiled to be able to play your encoded video, as there are ",(0,s.jsx)(n.strong,{children:"zero"})," video players currently in the whole world that can play your encoded content."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var o=i(6540);const s={},r=o.createContext(s);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);