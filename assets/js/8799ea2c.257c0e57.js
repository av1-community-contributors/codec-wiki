"use strict";(self.webpackChunkcodec_wiki=self.webpackChunkcodec_wiki||[]).push([[2533],{7856:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"utilities/dav1d","title":"dav1d","description":"The dav1d (which stands for \\"dav1d is an AV1 decoder\\") AV1 decoder is a high-performance, lightweight, and open-source software decoder for the AV1 video codec. It is primarily developed by Two Orioles, LLC on behalf of Videolan. It is known for being extremely lightweight and very fast.","source":"@site/docs/utilities/dav1d.mdx","sourceDirName":"utilities","slug":"/utilities/dav1d","permalink":"/docs/utilities/dav1d","draft":false,"unlisted":false,"editUrl":"https://github.com/av1-community-contributors/codec-wiki/tree/main/docs/utilities/dav1d.mdx","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"title":"dav1d","sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"autocompressor","permalink":"/docs/utilities/autocompressor"},"next":{"title":"PSNR","permalink":"/docs/metrics/PSNR"}}');var s=n(4848),a=n(8453);const d={title:"dav1d",sidebar_position:15},t="dav1d",r={},l=[{value:"Features",id:"features",level:2},{value:"Binary Size",id:"binary-size",level:2},{value:"Performance Comparison",id:"performance-comparison",level:2},{value:"libgav1",id:"libgav1",level:3},{value:"libaom",id:"libaom",level:3},{value:"ffhevc",id:"ffhevc",level:3},{value:"Recent Developments",id:"recent-developments",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"dav1d",children:"dav1d"})}),"\n",(0,s.jsxs)(i.p,{children:['The dav1d (which stands for "dav1d is an AV1 decoder") AV1 decoder is a high-performance, lightweight, and open-source software decoder for the AV1 video codec. It is primarily developed by ',(0,s.jsx)(i.a,{href:"https://www.twoorioles.com",children:"Two Orioles, LLC"})," on behalf of Videolan. It is known for being extremely lightweight and very fast."]}),"\n",(0,s.jsx)(i.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Design"}),": Written in C99 with assembly optimizations (NASM/GAS syntax), dav1d is designed for speed and low resource consumption"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Platform Support"}),": Compatible with x86, x64, ARMv7, ARMv8, & more. It runs on Windows, Linux, macOS, Android, and iOS."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Adoption"}),": dav1d is used across all Android devices as well as major browsers like Chrome, Safari, Edge, and Firefox. It is believed that the AVIF decoding on Apple devices uses a version of dav1d that may be an internal fork."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"binary-size",children:"Binary Size"}),"\n",(0,s.jsx)(i.p,{children:"dav1d's binary size is approximately one-third that of libaom's decoder, weighing in at around 0.9 MB. It also has a much smaller codebase that libaom, about one-tenth the lines of code; making it lightweight and easier to integrate into applications."}),"\n",(0,s.jsx)(i.h2,{id:"performance-comparison",children:"Performance Comparison"}),"\n",(0,s.jsx)(i.h3,{id:"libgav1",children:"libgav1"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["dav1d significantly outperforms Google's libgav1 in decoding speed. For example:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"On a Google Pixel 3 XL (without hardware acceleration), dav1d achieves 50 fps for 4K60 video decoding, whereas libgav1 achieves less than 10 fps."}),"\n",(0,s.jsx)(i.li,{children:"dav1d is more efficient in CPU resource usage and power consumption, making it ideal for low-end devices."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"libaom",children:"libaom"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"dav1d offers better decoding performance than libaom (the AV1 reference implementation), particularly after optimizations with assembly code. While libaom is slower due to its focus on demonstrating codec functionality rather than performance, dav1d is optimized for real-world use cases."}),"\n",(0,s.jsx)(i.li,{children:"Memory usage is also significantly lower with dav1d\u2014about one-fourth that of libaom."}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"ffhevc",children:"ffhevc"}),"\n",(0,s.jsx)(i.p,{children:"dav1d's decoding efficiency rivals or exceeds that of ffhevc."}),"\n",(0,s.jsx)(i.h2,{id:"recent-developments",children:"Recent Developments"}),"\n",(0,s.jsx)(i.p,{children:"As of April 2024:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Android officially adopted dav1d as its default AV1 software decoder via a Play System update. This change significantly improved video playback on devices without hardware AV1 decoders"}),"\n",(0,s.jsx)(i.li,{children:"dav1d supports smooth playback of 720p30 videos on most devices and even higher resolutions on capable hardware"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(i.p,{children:"dav1d stands out as the most efficient and widely adopted software-based AV1 decoder. Its small binary size, high performance across platforms, and low resource consumption make it a preferred choice over alternatives like libgav1 and libaom. Additionally, its adoption by major platforms such as Android underscores its effectiveness in real-world applications."})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>t});var o=n(6540);const s={},a=o.createContext(s);function d(e){const i=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(a.Provider,{value:i},e.children)}}}]);