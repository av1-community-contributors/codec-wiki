"use strict";(self.webpackChunkcodec_wiki=self.webpackChunkcodec_wiki||[]).push([[7978],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9463:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"colorimetry/transfer","title":"Transfer Characteristics","description":"Transfer characteristics, also known as transfer functions, define the","source":"@site/docs/colorimetry/transfer.mdx","sourceDirName":"colorimetry","slug":"/colorimetry/transfer","permalink":"/docs/colorimetry/transfer","draft":false,"unlisted":false,"editUrl":"https://github.com/av1-community-contributors/codec-wiki/tree/main/docs/colorimetry/transfer.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Transfer Characteristics","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Color Primaries","permalink":"/docs/colorimetry/primaries"},"next":{"title":"Matrix Coefficients","permalink":"/docs/colorimetry/matrix"}}');var t=i(4848),r=i(8453);const a={title:"Transfer Characteristics",sidebar_position:5},o="Transfer Characteristics",l={},c=[{value:"1: BT.1886",id:"1-bt1886",level:3},{value:"2: Unspecified",id:"2-unspecified",level:3},{value:"4: BT.470M",id:"4-bt470m",level:3},{value:"5: BT.470BG",id:"5-bt470bg",level:3},{value:"6: SMPTE 170M",id:"6-smpte-170m",level:3},{value:"7: SMPTE 240M",id:"7-smpte-240m",level:3},{value:"8: Linear",id:"8-linear",level:3},{value:"9: Logarithmic 100",id:"9-logarithmic-100",level:3},{value:"10: Logarithmic 316",id:"10-logarithmic-316",level:3},{value:"11: XVYCC",id:"11-xvycc",level:3},{value:"12: BT.1361E",id:"12-bt1361e",level:3},{value:"13: sRGB",id:"13-srgb",level:3},{value:"14: BT.2020 10-bit",id:"14-bt2020-10-bit",level:3},{value:"15: BT.2020 12-bit",id:"15-bt2020-12-bit",level:3},{value:"16: PQ aka SMPTE 2084",id:"16-pq-aka-smpte-2084",level:3},{value:"17: SMPTE 428",id:"17-smpte-428",level:3},{value:"18: HLG aka Hybrid Log-Gamma",id:"18-hlg-aka-hybrid-log-gamma",level:3}];function d(e){const n={h1:"h1",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"transfer-characteristics",children:"Transfer Characteristics"})}),"\n",(0,t.jsx)(n.p,{children:'Transfer characteristics, also known as transfer functions, define the\nshaping used to compress the luminance or "brightness" of a video, we use\nthe Transfer Characteristics to determine how to convert from a compressed\nvideo to a video that is in linear light, as well as converitng a linear\nlight video to a compressed video. These functions are known as EOTF, OETF, or OOTF.'}),"\n",(0,t.jsx)(n.p,{children:"Note that in some transfer functions like sRGB, you need to undo the OETF. The\nspecification defines how to encode sRGB, and how a display should decode it,\nbut not how to convert it back to linear light. In cases like these, it is typical\nto simply undo the encoding with an inverse transfer function, instead of using the\nfunction the display is to use."}),"\n",(0,t.jsx)(n.p,{children:"This luminance can often be refered to as gamma, however due to the term gamma also\nbeing used to refer to a myriad of other things, it is better to avoid this term when\npossible."}),"\n",(0,t.jsx)(n.p,{children:"Integer values much like with primaries are often used to define universal consants in\nthe transfer functions. Transfer functions can either be absolute functions which\nspecify the peak and minumum luminance, or be relative functions which specify\nhow to display a pixel within a range between maximum and minimum intensity.\nThese transfer functions typically have a nominal reference brightness, but this\ncan be more of a suggestion rather then a hard requirement in some cases. Commonly\nseen with sRGB."}),"\n",(0,t.jsx)(n.p,{children:"The following values are available:"}),"\n",(0,t.jsx)(n.h3,{id:"1-bt1886",children:"1: BT.1886"}),"\n",(0,t.jsx)(n.p,{children:"BT.1886 is the standard used for most modern, SDR video, and is a safe default assumption."}),"\n",(0,t.jsx)(n.p,{children:"This transfer function is used in the following standards:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.709-6"}),"\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.1361-0 conventional\ncolour gamut system (historical)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-unspecified",children:"2: Unspecified"}),"\n",(0,t.jsx)(n.p,{children:"This value indicates that no transfer function is set for the video, and the player must decide which value to use."}),"\n",(0,t.jsx)(n.p,{children:"mpv will always assume BT.1886 in this case."}),"\n",(0,t.jsx)(n.h3,{id:"4-bt470m",children:"4: BT.470M"}),"\n",(0,t.jsx)(n.p,{children:"BT.470M is a standard that was used in analog television systems in the United States. This transfer represents a power function with a gamma of 2.2."}),"\n",(0,t.jsx)(n.p,{children:"This transfer function is used in the following standards:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.470-6 System M\n(historical)"}),"\n",(0,t.jsx)(n.li,{children:"United States National Television\nSystem Committee 1953\nRecommendation for transmission\nstandards for color television"}),"\n",(0,t.jsx)(n.li,{children:"United States Federal Communications\nCommission (2003) Title 47 Code of\nFederal Regulations 73.682 (a) (20)"}),"\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.1700-0 625 PAL and\n625 SECAM"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-bt470bg",children:"5: BT.470BG"}),"\n",(0,t.jsx)(n.p,{children:"BT.470BG is a standard that was used for European (PAL) television systems and DVDs. This transfer represents a power function with a gamma of 2.8."}),"\n",(0,t.jsx)(n.h3,{id:"6-smpte-170m",children:"6: SMPTE 170M"}),"\n",(0,t.jsx)(n.p,{children:"SMPTE 170M is a stanrard that was used for NTSC television systems and DVDs. Its transfer function is equivalent to BT.1886."}),"\n",(0,t.jsx)(n.p,{children:"This transfer function is used in the following standards:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.601-7 525 or 625"}),"\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.1358-1 525 or 625\n(historical)"}),"\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.1700-0 NTSC"}),"\n",(0,t.jsx)(n.li,{children:"SMPTE ST 170 (2004)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"7-smpte-240m",children:"7: SMPTE 240M"}),"\n",(0,t.jsx)(n.p,{children:"SMPTE 240M was an interim standard used during the early days of HDTV (1988-1998)."}),"\n",(0,t.jsx)(n.h3,{id:"8-linear",children:"8: Linear"}),"\n",(0,t.jsx)(n.p,{children:"This value indicates that the content is already in linear light."}),"\n",(0,t.jsx)(n.h3,{id:"9-logarithmic-100",children:"9: Logarithmic 100"}),"\n",(0,t.jsx)(n.p,{children:"Indicates a logarithmic transfer function with a 100:1 range."}),"\n",(0,t.jsx)(n.h3,{id:"10-logarithmic-316",children:"10: Logarithmic 316"}),"\n",(0,t.jsx)(n.p,{children:"Indicates a logarithmic transfer function with a (100 * sqrt(10)):1 range."}),"\n",(0,t.jsx)(n.h3,{id:"11-xvycc",children:"11: XVYCC"}),"\n",(0,t.jsx)(n.p,{children:"Used in standard IEC 61966-2-4. I have no idea what this actually is."}),"\n",(0,t.jsx)(n.h3,{id:"12-bt1361e",children:"12: BT.1361E"}),"\n",(0,t.jsx)(n.p,{children:'This was intended to be a standard for "future" television systems, but it never really came into use.'}),"\n",(0,t.jsx)(n.h3,{id:"13-srgb",children:"13: sRGB"}),"\n",(0,t.jsx)(n.p,{children:"Represents the sRGB colorspace."}),"\n",(0,t.jsx)(n.p,{children:"This transfer function is used in the following standards:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"IEC 61966-2-1 sRGB (with\nMatrixCoefficients equal to 0)"}),"\n",(0,t.jsx)(n.li,{children:"IEC 61966-2-1 sYCC (with\nMatrixCoefficients equal to 5)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note: Content often specifies that it is encoded with sRGB but in reality, is encoded in a pure 2.2\nfunction. While close there is a discrepency which often shows in the form of shadows taking on the wrong\nluminance. Specifying the encoding as BT.470M can be used to work around this."}),"\n",(0,t.jsx)(n.h3,{id:"14-bt2020-10-bit",children:"14: BT.2020 10-bit"}),"\n",(0,t.jsx)(n.p,{children:"Typically used with ultra-high-definition 10-bit SDR video. Its transfer function is equivalent to BT.1886."}),"\n",(0,t.jsx)(n.h3,{id:"15-bt2020-12-bit",children:"15: BT.2020 12-bit"}),"\n",(0,t.jsx)(n.p,{children:"Typically used with ultra-high-definition 12-bit SDR video. Its transfer function is equivalent to BT.1886."}),"\n",(0,t.jsx)(n.h3,{id:"16-pq-aka-smpte-2084",children:"16: PQ aka SMPTE 2084"}),"\n",(0,t.jsx)(n.p,{children:"PQ is the most widely used transfer function for HDR content. It allows for a wider range of luminance to be represented than conventional transfer functions."}),"\n",(0,t.jsx)(n.p,{children:"This transfer function is used in the following standards:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"SMPTE ST 2084 (2014) for 10-, 12-,\n14- and 16-bit systems"}),"\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.2100-2 perceptual\nquantization (PQ) system"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"17-smpte-428",children:"17: SMPTE 428"}),"\n",(0,t.jsx)(n.p,{children:"SMPTE 428 is used for D-Cinema Distribution Masters, aka DCDM."}),"\n",(0,t.jsx)(n.h3,{id:"18-hlg-aka-hybrid-log-gamma",children:"18: HLG aka Hybrid Log-Gamma"}),"\n",(0,t.jsx)(n.p,{children:"HLG is an alternative transfer function for HDR content used by some televisions."}),"\n",(0,t.jsx)(n.p,{children:"This transfer function is used in the following standards:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ARIB STD-B67 (2015)"}),"\n",(0,t.jsx)(n.li,{children:"Rec. ITU-R BT.2100-2 hybrid log-\ngamma (HLG) system"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);