"use strict";(self.webpackChunkcodec_wiki=self.webpackChunkcodec_wiki||[]).push([[5993],{1893:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"encoders/SVT-AV1","title":"SVT-AV1","description":"The content in this entry is incomplete & is in the process of being completed.","source":"@site/docs/encoders/SVT-AV1.mdx","sourceDirName":"encoders","slug":"/encoders/SVT-AV1","permalink":"/docs/encoders/SVT-AV1","draft":false,"unlisted":false,"editUrl":"https://github.com/av1-community-contributors/codec-wiki/tree/main/docs/encoders/SVT-AV1.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"SVT-AV1","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"SVT-AV1-PSY","permalink":"/docs/encoders/SVT-AV1-PSY"},"next":{"title":"rav1e","permalink":"/docs/encoders/rav1e"}}');var s=t(4848),o=t(8453),r=t(5537),a=t(9329);const l={title:"SVT-AV1",sidebar_position:5},c="SVT-AV1",d={},h=[{value:"FFmpeg",id:"ffmpeg",level:2},{value:"Supported Color Space",id:"supported-color-space",level:2},{value:"Installation",id:"installation",level:2},{value:"Encoding",id:"encoding",level:2},{value:"Strengths",id:"strengths",level:3},{value:"Weaknesses",id:"weaknesses",level:3},{value:"Encoder Optimization",id:"encoder-optimization",level:3},{value:"Community Forks",id:"community-forks",level:2},{value:"SVT-AV1-PSY",id:"svt-av1-psy",level:3}];function u(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"svt-av1",children:"SVT-AV1"})}),"\n",(0,s.jsx)(i.admonition,{title:"Under Maintenance",type:"info",children:(0,s.jsx)(i.p,{children:"The content in this entry is incomplete & is in the process of being completed."})}),"\n",(0,s.jsxs)(i.p,{children:['SVT-AV1 (Scalable Video Technology for AV1) is an AV1-compliant software encoder/decoder library. Jointly developed by Intel and Netflix, SVT-AV1 is written almost entirely in C with some parts written in C++ and Assembly. As the name suggests, it is part of the "',(0,s.jsx)(i.a,{href:"https://www.intel.com/content/www/us/en/developer/articles/technical/scalable-video-technology.html",children:"Scalable Video Technology"}),'" project lineup by Intel.']}),"\n",(0,s.jsxs)(i.p,{children:['This entry discusses the SVT-AV1 encoder, also known as the "Production" AV1 encoder (while ',(0,s.jsx)(i.a,{href:"/docs/encoders/aomenc",children:"aomenc"}),' is the "reference" AV1 encoder), & refers to SVT-AV1 as such. SVT-AV1 is known for its parallelization, high coding efficiency, & active development. SVT-AV1 scales across multiple CPU cores much more effectively than aomenc or ',(0,s.jsx)(i.a,{href:"/docs/encoders/rav1e",children:"rav1e"}),", so the use of tools like ",(0,s.jsx)(i.a,{href:"/docs/utilities/av1an",children:"Av1an"})," is less helpful albeit still helpful for scene detection."]}),"\n",(0,s.jsx)(i.h2,{id:"ffmpeg",children:"FFmpeg"}),"\n",(0,s.jsxs)(i.p,{children:["SVT-AV1 is available in FFmpeg via ",(0,s.jsx)(i.code,{children:"libsvtav1"}),", to check if you have it, run ",(0,s.jsx)(i.code,{children:"ffmpeg -h encoder=libsvtav1"}),". You can input non-FFmpeg standard SVT-AV1 parameters via ",(0,s.jsx)(i.code,{children:"-svtav1-params"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"supported-color-space",children:"Supported Color Space"}),"\n",(0,s.jsx)(i.p,{children:"SVT-AV1 supports the following color spaces:"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Format"}),(0,s.jsx)(i.th,{style:{textAlign:"center"},children:"Chroma Subsampling"}),(0,s.jsx)(i.th,{children:"Supported Bit Depth(s)"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"YUV420P"}),(0,s.jsx)(i.td,{style:{textAlign:"center"},children:"4:2:0"}),(0,s.jsx)(i.td,{children:"8-bit"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"YUV420P10LE"}),(0,s.jsx)(i.td,{style:{textAlign:"center"},children:"4:2:0"}),(0,s.jsx)(i.td,{children:"10-bit"})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(a.A,{value:"unixlike",label:"Linux & macOS",children:[(0,s.jsx)(i.p,{children:(0,s.jsxs)(i.em,{children:["A precompiled AVX2-optimized binary of SVT-AV1-PSY can be installed for x86_64 Linux via ",(0,s.jsx)(i.a,{href:"/docs/utilities/rav1ator-cli",children:"rAV1ator CLI"}),". However, it is always recommended to build from source."]})}),(0,s.jsx)(i.p,{children:"To build SVT-AV1 from source, first clone the desired SVT-AV1 repository & enter the build directory."}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",metastring:'title="Clone mainline SVT-AV1"',children:"git clone https://gitlab.com/AOMediaCodec/SVT-AV1/\ngit reset --hard bbcff785881b320f7e1b1f77a2f5ed025f8bfd75 # Reset to release 2.1.0\ncd SVT-AV1/Build/linux\n"})}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",metastring:'title="Clone SVT-AV1-PSY"',children:"git clone https://github.com/gianni-rosato/svt-av1-psy\ncd SVT-AV1/Build/linux\n"})}),(0,s.jsxs)(i.p,{children:["In the directory, simply run ",(0,s.jsx)(i.code,{children:"./build.sh [flags]"})," to build. Be aware that building requires CMake version 3.16 or higher and either GCC or Clang. It is recommended to use clang when building SVT-AV1."]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",metastring:'title="Build release"',children:"./build.sh release\n"})}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",metastring:'title="Statically build just the encoder with clang and enable link-time optimization"',children:"./build.sh jobs=8 all cc=clang cxx=clang++ no-dec enable-lto static native\n"})}),(0,s.jsxs)(i.p,{children:["The compiled binaries will be in the ",(0,s.jsx)(i.code,{children:"Bin/Release"})," directory, including SvtAv1EncApp. If you just want the encoder, adding the ",(0,s.jsx)(i.code,{children:"no-dec"})," flag will skip building SvtAv1DecApp and save on compilation time."]}),(0,s.jsxs)(i.p,{children:["If you want extra performance, it is possible to build SVT-AV1 using PGO (Profile-guided Optimization). ",(0,s.jsxs)(i.strong,{children:["Be aware that this particular script infers that you have a .y4m file (or multiple) in ",(0,s.jsx)(i.code,{children:"/dev/shm"})," for transcoding"]}),". You can compile statically linked SVT-AV1 with PGO (and LTO, or link-time optimization) by following this script:"]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",metastring:'title="Bulding SVT-AV1 with profile guided optimization"',children:"git clone https://gitlab.com/AOMediaCodec/SVT-AV1/\ncd SVT-AV1/Build/linux\n./build.sh cc=gcc cxx=g++ enable-lto enable-pgo static native jobs=$(nproc) pgo-dir=/dev/shm pgo-videos=/dev/shm release\n"})}),(0,s.jsx)(i.p,{children:"If you wish to store videos elsewhere or provide custom parameters to the SvtAv1EncApp binary, try this script:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"git clone https://gitlab.com/AOMediaCodec/SVT-AV1/\ncd SVT-AV1/Build/linux\n./build.sh cc=gcc cxx=g++ enable-lto enable-pgo static native jobs=$(nproc) pgo-dir=/dev/shm pgo-compile-gen release\n../../Bin/Release/SvtAv1EncApp # Run this binary as many times as you'd like with arguments of your choice to collect data\n./build.sh cc=gcc cxx=g++ enable-lto enable-pgo static native jobs=$(nproc) pgo-dir=/dev/shm pgo-compile-use release\n"})})]}),(0,s.jsx)(a.A,{value:"windows",label:"Windows",children:(0,s.jsxs)(i.p,{children:["To be filled. If you believe you can help, see our ",(0,s.jsx)(i.a,{href:"/docs/contribution-guide",children:"Contribution Guide"}),"."]})})]}),"\n",(0,s.jsx)(i.h2,{id:"encoding",children:"Encoding"}),"\n",(0,s.jsx)(i.h3,{id:"strengths",children:"Strengths"}),"\n",(0,s.jsx)(i.p,{children:"SVT-AV1's greatest strength is its parallelization capability, where it outclasses other AV1 encoders by a significant margin. SVT-AV1's parallelization techniques do not involve tiling & don't harm video quality, & can comfortably utilize up to 16 cores given 1080p source video. This is while maintaining competitive coding efficiency to mainline aomenc. Perceptually, mainline SVT-AV1 is outperformed by well-tuned community forks of aomenc, but according to many the gap has begun to close with the introduction of SVT-AV1-PSY."}),"\n",(0,s.jsx)(i.h3,{id:"weaknesses",children:"Weaknesses"}),"\n",(0,s.jsxs)(i.p,{children:["SVT-AV1 is strongest on x86 CPUs, & while ARM NEON assembly is ",(0,s.jsx)(i.a,{href:"https://gitlab.com/AOMediaCodec/SVT-AV1/-/commit/ba13fac241f1b54954935f2cb200efc07f3de13a",children:"available"})," and has been slowly improving since its introduction in version 1.8.0, SVT-AV1 still underperforms on ARM. For this reason, it is not a good cross-architecture CPU benchmark. SVT-AV1's support for various AV1 features is also limited; it only supports up to 4:2:0 chroma subsampling with no support for 12-bit color, and it does not support scene change detection (there are no plans to implement this, either). The smallest possible video that SVT-AV1 can produce is 64x64."]}),"\n",(0,s.jsx)(i.h3,{id:"encoder-optimization",children:"Encoder Optimization"}),"\n",(0,s.jsxs)(i.p,{children:["Aside from build optimizations for speed, there is further tweaking to be done to the ",(0,s.jsx)(i.code,{children:"SvtAv1EncApp"})," binary parameters when encoding. The following applies to mainline SVT-AV1, but does not apply to SVT-AV1-PSY."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"--film-grain"})," & ",(0,s.jsx)(i.code,{children:"--film-grain-denoise"})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Most live-action sources feature hard-to-compress digital noise that is easily smoothed out by AV1 compression. To add this grain back, or even denoise through the encoder and then add grain, it is possible to use the ",(0,s.jsx)(i.code,{children:"--film-grain"})," parameter to specify an amount of film grain to add to the encode (& ",(0,s.jsx)(i.code,{children:"--film-grain-denoise"})," to specify how to denoise the input video before encoding for potentially better appeal). Denoising a video always removes fine details, so sticking with just ",(0,s.jsx)(i.code,{children:"--film-grain"})," is recommended in most cases. According to ",(0,s.jsx)(i.a,{href:"https://gitlab.com/AOMediaCodec/SVT-AV1/-/blob/master/Docs/CommonQuestions.mdx#practical-advice-on-grain-synthesis",children:"SVT-AV1 documentation"}),", a level of 8 should be used for live-action content with a normal amount of grain while a level of 4 works well for hand-drawn animation or other smoother-looking sources that still stand to benefit from some grain synthesis."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--input-depth 10"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"10-bit output from AV1 encoding is always desirable for coding efficiency, even if your source is 8-bit. This option only produces a 10-bit AV1 bitstream if the source provided to the encoder is 10-bit."}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--tune 2"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["There are three tunes in mainline SVT-AV1: Tune 1 is for ",(0,s.jsx)(i.a,{href:"/docs/metrics/PSNR",children:"PSNR"})," ",(0,s.jsx)(i.a,{href:"/docs/introduction/psychovisual",children:"RDO"}),", Tune 2 is for ",(0,s.jsx)(i.a,{href:"/docs/metrics/SSIM",children:"SSIM"})," RDO, & Tune 0 is a ",(0,s.jsx)(i.a,{href:"/docs/introduction/psychovisual",children:"psychovisual"})," tune labeled VQ. It has been common practice to lean away from the PSNR tune, as it is not designed for visual quality but rather to perform better on the PSNR metric which is widely considered to be inconsistent with our human perception of fidelity. Using the VQ tune is a safe bet for now, but many believe the newer SSIM tune provides better visual fidelity. Using SVT-AV1-PSY, the custom Subjective SSIM tune (Tune 3) provides the best of both Tune 2 & Tune 0 with additional improvements as well."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--enable-qm 1"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Enables quantization matrices, disabled by default. Improves coding efficiency mainly by improving encoding speed while producing similar quality video."}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--qm-min 0"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Sets the minimum flatness of quantization matrices to 0, down from the default 8. This is recommended unless you are dealing with extremely heavy grain. The maximum quantization matrix flatness is 15 by default, and should be left alone"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--keyint [FPS*10]"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Similar to ",(0,s.jsx)(i.code,{children:"--kf-max-dist"})," in ",(0,s.jsx)(i.a,{href:"/docs/encoders/vpxenc",children:"vpxenc"}),", this tells the encoder when to place keyframes. Because SVT-AV1 doesn't have scene detection, this isn't the maximum distance between keyframes, but rather a fixed interval for placing keyframes. If using Av1an, set to -1 to disable keyframe insertion as Av1an handles that instead."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--irefresh-type 2"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Intra refresh is specified through this option, & lets the user decide between Closed GOP & Open GOP. GOP stands for Group of Pictures. Open GOP allows GOPs to ",(0,s.jsx)(i.a,{href:"https://ottverse.com/closed-gop-open-gop-idr/",children:"reference one another"}),", but support for this feature is currently incomplete. Therefore, it is recommended to use Closed GOP for the time being via ",(0,s.jsx)(i.code,{children:"--irefresh-type 2"})," until this is rectified."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--preset X"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"SVT-AV1 can be used in 14 different presets, labeled -1 through 13. Preset -1 is the slowest, but provides the best coding efficiency; it is also dubbed a research preset that is not recommended for regular use. Preset 13 is the fastest, and is also not recommended for regular use as it makes serious trade-offs to achieve unrealistically fast speeds at the cost of the encoder's coding efficiency. Using presets 2 through 8 is the best course of action for non-realtime applications if you desire reasonable speed, while 9 through 12 are useful for real-time encoding at 1080p or lower, even on low-end consumer computer hardware."}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"--crf X"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"CRF is the best way to target quality for optimal visual fidelity. VBR & CBR lose efficiency due to their inherently limited rate control capabilities."}),"\n",(0,s.jsx)(i.h2,{id:"community-forks",children:"Community Forks"}),"\n",(0,s.jsxs)(i.p,{children:["Currently, there is only one noteworthy community fork of SVT-AV1 called ",(0,s.jsx)(i.a,{href:"/docs/encoders/SVT-AV1-PSY",children:"SVT-AV1-PSY"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"svt-av1-psy",children:"SVT-AV1-PSY"}),"\n",(0,s.jsxs)(i.p,{children:["SVT-AV1-PSY is a community fork of SVT-AV1 that strives to improve the perceptual fidelity and quality of life provided by the encoder. The goal of this project is to create the best encoding implementation for perceptual quality with AV1, and it aims to surpass previous community forks of ",(0,s.jsx)(i.a,{href:"/docs/encoders/aomenc#community-forks",children:"aomenc"})," in speed and visual quality."]}),"\n",(0,s.jsxs)(i.p,{children:["SVT-AV1-PSY has a number of feature additions to the mainline SVT-AV1 encoder as well as modified defaults that aim to make it easier to produce a more perceptually optimal bistream. For a full list of the encoder's feature additions and modifications to defaults, see the ",(0,s.jsx)(i.a,{href:"https://github.com/gianni-rosato/svt-av1-psy/blob/master/README.md#feature-additions",children:"project's README"}),"."]})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},5537:(e,i,t)=>{t.d(i,{A:()=>y});var n=t(6540),s=t(4164),o=t(5627),r=t(6347),a=t(372),l=t(604),c=t(1861),d=t(8749);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:i}=e;return!!i&&"object"==typeof i&&"value"in i}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:i,children:t}=e;return(0,n.useMemo)((()=>{const e=i??function(e){return h(e).map((({props:{value:e,label:i,attributes:t,default:n}})=>({value:e,label:i,attributes:t,default:n})))}(t);return function(e){const i=(0,c.XI)(e,((e,i)=>e.value===i.value));if(i.length>0)throw new Error(`Docusaurus error: Duplicate values "${i.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[i,t])}function p({value:e,tabValues:i}){return i.some((i=>i.value===e))}function m({queryString:e=!1,groupId:i}){const t=(0,r.W6)(),s=function({queryString:e=!1,groupId:i}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:e,groupId:i});return[(0,l.aZ)(s),(0,n.useCallback)((e=>{if(!s)return;const i=new URLSearchParams(t.location.search);i.set(s,e),t.replace({...t.location,search:i.toString()})}),[s,t])]}function f(e){const{defaultValue:i,queryString:t=!1,groupId:s}=e,o=u(e),[r,l]=(0,n.useState)((()=>function({defaultValue:e,tabValues:i}){if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=i.find((e=>e.default))??i[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:i,tabValues:o}))),[c,h]=m({queryString:t,groupId:s}),[f,b]=function({groupId:e}){const i=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(i);return[t,(0,n.useCallback)((e=>{i&&s.set(e)}),[i,s])]}({groupId:s}),g=(()=>{const e=c??f;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{g&&l(g)}),[g]);return{selectedValue:r,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),b(e)}),[h,b,o]),tabValues:o}}var b=t(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function v({className:e,block:i,selectedValue:t,selectValue:n,tabValues:r}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const i=e.currentTarget,s=a.indexOf(i),o=r[s].value;o!==t&&(l(i),n(o))},d=e=>{let i=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;i=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;i=a[t]??a[a.length-1];break}}i?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":i},e),children:r.map((({value:e,label:i,attributes:n})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...n,className:(0,s.A)("tabs__item",g.tabItem,n?.className,{"tabs__item--active":t===e}),children:i??e},e)))})}function V({lazy:e,children:i,selectedValue:t}){const o=(Array.isArray(i)?i:[i]).filter(Boolean);if(e){const e=o.find((e=>e.props.value===t));return e?(0,n.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,i)=>(0,n.cloneElement)(e,{key:i,hidden:e.props.value!==t})))})}function j(e){const i=f(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,x.jsx)(v,{...i,...e}),(0,x.jsx)(V,{...i,...e})]})}function y(e){const i=(0,b.A)();return(0,x.jsx)(j,{...e,children:h(e.children)},String(i))}},8453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>a});var n=t(6540);const s={},o=n.createContext(s);function r(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:i},e.children)}},9329:(e,i,t)=>{t.d(i,{A:()=>r});t(6540);var n=t(4164);const s={tabItem:"tabItem_Ymn6"};var o=t(4848);function r({children:e,hidden:i,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,t),hidden:i,children:e})}}}]);